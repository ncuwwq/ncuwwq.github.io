<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>FengS Blog</title>
  
  <subtitle>每一个成功者都是从努力开始</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-10-19T10:45:11.342Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>FengS</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>celery之配置文件</title>
    <link href="http://yoursite.com/2018/10/19/celery%E4%B9%8B%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    <id>http://yoursite.com/2018/10/19/celery之配置文件/</id>
    <published>2018-10-19T08:53:00.000Z</published>
    <updated>2018-10-19T10:45:11.342Z</updated>
    
    <content type="html"><![CDATA[<h1 id="celery的配置文件"><a href="#celery的配置文件" class="headerlink" title="celery的配置文件"></a>celery的配置文件</h1><a id="more"></a><p>常用配置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">注意，celery4版本后，CELERY_BROKER_URL改为BROKER_URL</span><br><span class="line"></span><br><span class="line">BROKER_URL = <span class="string">'amqp://username:passwd@host:port/虚拟主机名'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定结果的接受地址</span></span><br><span class="line"></span><br><span class="line">CELERY_RESULT_BACKEND = <span class="string">'redis://username:passwd@host:port/db'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定任务序列化方式</span></span><br><span class="line"></span><br><span class="line">CELERY_TASK_SERIALIZER = <span class="string">'msgpack'</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定结果序列化方式</span></span><br><span class="line"></span><br><span class="line">CELERY_RESULT_SERIALIZER = <span class="string">'msgpack'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 任务过期时间,celery任务执行结果的超时时间</span></span><br><span class="line"></span><br><span class="line">CELERY_TASK_RESULT_EXPIRES = <span class="number">60</span> * <span class="number">20</span>   </span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定任务接受的序列化类型.</span></span><br><span class="line"></span><br><span class="line">CELERY_ACCEPT_CONTENT = [<span class="string">"msgpack"</span>]   </span><br><span class="line"></span><br><span class="line"><span class="comment"># 任务发送完成是否需要确认，这一项对性能有一点影响     </span></span><br><span class="line"></span><br><span class="line">CELERY_ACKS_LATE = <span class="keyword">True</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 压缩方案选择，可以是zlib, bzip2，默认是发送没有压缩的数据</span></span><br><span class="line"></span><br><span class="line">CELERY_MESSAGE_COMPRESSION = <span class="string">'zlib'</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 规定完成任务的时间</span></span><br><span class="line"></span><br><span class="line">CELERYD_TASK_TIME_LIMIT = <span class="number">5</span>  <span class="comment"># 在5s内完成任务，否则执行该任务的worker将被杀死，任务移交给父进程</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># celery worker的并发数，默认是服务器的内核数目,也是命令行-c参数指定的数目</span></span><br><span class="line"></span><br><span class="line">CELERYD_CONCURRENCY = <span class="number">4</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># celery worker 每次去rabbitmq预取任务的数量</span></span><br><span class="line"></span><br><span class="line">CELERYD_PREFETCH_MULTIPLIER = <span class="number">4</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 每个worker执行了多少任务就会死掉，默认是无限的</span></span><br><span class="line"></span><br><span class="line">CELERYD_MAX_TASKS_PER_CHILD = <span class="number">40</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置默认的队列名称，如果一个消息不符合其他的队列就会放在默认队列里面，如果什么都不设置的话，数据都会发送到默认的队列中</span></span><br><span class="line"></span><br><span class="line">CELERY_DEFAULT_QUEUE = <span class="string">"default"</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置详细的队列</span></span><br><span class="line"></span><br><span class="line">CELERY_QUEUES = &#123;</span><br><span class="line">     <span class="string">"default"</span>: &#123; <span class="comment"># 这是上面指定的默认队列</span></span><br><span class="line">         <span class="string">"exchange"</span>: <span class="string">"default"</span>,</span><br><span class="line">         <span class="string">"exchange_type"</span>: <span class="string">"direct"</span>,</span><br><span class="line">         <span class="string">"routing_key"</span>: <span class="string">"default"</span></span><br><span class="line">     &#125;,</span><br><span class="line">     <span class="string">"topicqueue"</span>: &#123; <span class="comment"># 这是一个topic队列 凡是topictest开头的routing key都会被放到这个队列</span></span><br><span class="line">         <span class="string">"routing_key"</span>: <span class="string">"topic.#"</span>,</span><br><span class="line">         <span class="string">"exchange"</span>: <span class="string">"topic_exchange"</span>,</span><br><span class="line">         <span class="string">"exchange_type"</span>: <span class="string">"topic"</span>,</span><br><span class="line">     &#125;,</span><br><span class="line">     <span class="string">"task_eeg"</span>: &#123; <span class="comment"># 设置扇形交换机</span></span><br><span class="line">         <span class="string">"exchange"</span>: <span class="string">"tasks"</span>,</span><br><span class="line">         <span class="string">"exchange_type"</span>: <span class="string">"fanout"</span>,</span><br><span class="line">         <span class="string">"binding_key"</span>: <span class="string">"tasks"</span>,</span><br><span class="line">     &#125;,</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;celery的配置文件&quot;&gt;&lt;a href=&quot;#celery的配置文件&quot; class=&quot;headerlink&quot; title=&quot;celery的配置文件&quot;&gt;&lt;/a&gt;celery的配置文件&lt;/h1&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>初步认识celery</title>
    <link href="http://yoursite.com/2018/10/15/%E5%88%9D%E6%AD%A5%E8%AE%A4%E8%AF%86celery/"/>
    <id>http://yoursite.com/2018/10/15/初步认识celery/</id>
    <published>2018-10-15T12:25:53.000Z</published>
    <updated>2018-10-16T02:35:40.103Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Celery-的简单认识"><a href="#Celery-的简单认识" class="headerlink" title="Celery 的简单认识"></a>Celery 的简单认识</h2><p>Celery的架构由三部分组成，消息中间件（broker），任务执行单元（worker）和任务执行结果存储（task result store）组成。</p><p>1.消息中间件</p><p>Celery本身不提供消息服务，但是可以方便的和第三方提供的消息中间件集成。包括，RabbitMQ, Redis, MongoDB (experimental), Amazon SQS (experimental),CouchDB (experimental), SQLAlchemy (experimental),Django ORM (experimental), IronMQ</p><p>2.任务执行单元</p><p>Worker是Celery提供的任务执行的单元，worker并发的运行在分布式的系统节点中。</p><p>3.任务结果存储</p><p>Task result store用来存储Worker执行的任务的结果，Celery支持以不同方式存储任务的结果，包括AMQP, Redis，memcached, MongoDB，SQLAlchemy, Django ORM，Apache Cassandra, IronCache</p><p>更多信息可参考文档<a href="http://docs.jinkan.org/docs/celery/getting-started/introduction.html" target="_blank" rel="noopener">http://docs.jinkan.org/docs/celery/getting-started/introduction.html</a></p><a id="more"></a><h2 id="celery的初步使用"><a href="#celery的初步使用" class="headerlink" title="celery的初步使用"></a>celery的初步使用</h2><p><strong>本地环境</strong></p><p>!celery1](初步认识celery\celery1.PNG)</p><p>win10家庭版,python3.6,celery4.2,redis4.0</p><p>(环境安装简单，Python的编辑器使用的是pycharm)</p><p><strong>应用</strong></p><p>按照官网文档上的步骤，首先创建一个task.py文件，代码如图</p><p><img src="/2018/10/15/初步认识celery/celery1.PNG" alt="celery1"></p><p>导入celery模块，因为我使用的是redis作为中间件所以还要安装相关依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install celery[redis]</span><br></pre></td></tr></table></figure><p>backend是结果返回的地方，这里celery会把任务处理的结果返回redis中</p><p>使用@app.task装饰器修饰add函数，接下来我就开始测试了</p><p><img src="/2018/10/15/初步认识celery/celery2.PNG" alt="celery2"></p><p>celery成功跑起来了，接下来进入Python shell添加任务</p><p><img src="/2018/10/15/初步认识celery/celery3.PNG" alt="celery3"></p><p>what？竟然报错了，再去看看celery</p><p><img src="/2018/10/15/初步认识celery/celery4.PNG" alt="celery4"></p><p>很明显报了一个ValueError: not enough values to unpack (expected 3, got 0)错误，百度一下网上有人说是4.0版本不支持win10，但也有人给出了解决方案，切换celery的执行模式，celery默认是执行模式是perfork(多进程)，win10无法正常工作，因此得切换其他模式，我试了两种solo和eventlet，结果都可行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">celery -A task worker --pool=solo -l info</span><br></pre></td></tr></table></figure><p>solo指明一个一个的处理任务，这样处理很慢，另一种eventlet使用的是协成模式，使用前先安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install eventlet</span><br><span class="line">celery -A task worker -l info -P eventlet</span><br></pre></td></tr></table></figure><p>然后再次执行add函数</p><p><img src="/2018/10/15/初步认识celery/celery6.PNG" alt="celery6"></p><p>已经成功执行了</p><p>最后再去redis看看结果吧</p><p><img src="/2018/10/15/初步认识celery/celery5.PNG" alt=""></p><p>失败和成功的记录都在里面了，celery的初步使用到此结束了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Celery-的简单认识&quot;&gt;&lt;a href=&quot;#Celery-的简单认识&quot; class=&quot;headerlink&quot; title=&quot;Celery 的简单认识&quot;&gt;&lt;/a&gt;Celery 的简单认识&lt;/h2&gt;&lt;p&gt;Celery的架构由三部分组成，消息中间件（broker），任务执行单元（worker）和任务执行结果存储（task result store）组成。&lt;/p&gt;
&lt;p&gt;1.消息中间件&lt;/p&gt;
&lt;p&gt;Celery本身不提供消息服务，但是可以方便的和第三方提供的消息中间件集成。包括，RabbitMQ, Redis, MongoDB (experimental), Amazon SQS (experimental),CouchDB (experimental), SQLAlchemy (experimental),Django ORM (experimental), IronMQ&lt;/p&gt;
&lt;p&gt;2.任务执行单元&lt;/p&gt;
&lt;p&gt;Worker是Celery提供的任务执行的单元，worker并发的运行在分布式的系统节点中。&lt;/p&gt;
&lt;p&gt;3.任务结果存储&lt;/p&gt;
&lt;p&gt;Task result store用来存储Worker执行的任务的结果，Celery支持以不同方式存储任务的结果，包括AMQP, Redis，memcached, MongoDB，SQLAlchemy, Django ORM，Apache Cassandra, IronCache&lt;/p&gt;
&lt;p&gt;更多信息可参考文档&lt;a href=&quot;http://docs.jinkan.org/docs/celery/getting-started/introduction.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://docs.jinkan.org/docs/celery/getting-started/introduction.html&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/09/25/hello-world/"/>
    <id>http://yoursite.com/2018/09/25/hello-world/</id>
    <published>2018-09-25T02:41:19.378Z</published>
    <updated>2018-10-16T02:29:39.735Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
